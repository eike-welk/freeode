
#This file causes an compiler interval error, in the parser:
#RuntimeError: maximum recursion depth exceeded


#This is the usual predator prey model
class CompetitionModel:
    data N1, N2: Real #state variables
    data r1, r2, k1, k2, b12, b21: Real param

    #The system's equations
    func dynamic(this):
        #   |logistic growth | effect of other species
        $N1 = r1*N1 * (k1-N1 - b12*N2)/k1
        $N2 = r2*N2 * (k2-N2 - b21*N1)/k2

    #Function to detect the four different cases.
    #The simulation's final outcome is independent of the growth rate.
    func printCase(this):
        if k2/b21 > k1  and  k2 > k1/b12:
            print('Case 1: N2 will outgrow N1.')
        if k1 > k2/b12  and  k1/b12 > k2:
            print('Case 2: N1 will outgrow N2.')
        if k1 > k2/b21  and  k2 > k1/b12:
            print('Case 3: species with highest inital value will survive.')
        if k2/b12 > k1  and  k1/b12 > k2:
            print('Case 4: Stable coexistence of both species.')



#N2 will always outgrow N1.
class Case1:
    data m: CompetitionModel
    data N1_init, N2_init: Real param #parameters for initial values
    data showGraph: Real param #Flag if graphs should be shown

    func init():
        #parameters
        m.r1 = 1; m.r2 = 1   #growth rates
        m.k1 = 5; m.k2 = 10  #carrying capacities
        m.b12 = 1; m.b21 = 1 #sensitivity against presence of the other species
        #initial values
        N1_init = 0.5
        N2_init = 0.5
        m.N1 = N1_init; m.N2 = N2_init

        #print which case it is
        m.printCase()

        #administrative parameters
        showGraph = 1 #yes, show the graph
        solutionParameters.simulationTime = 20;     #simulate for until this time is reached
        solutionParameters.reportingInterval = 0.1; #interval for returning values of the solution

    #this function is called repeatedly by the solver
    func dynamic():
        m.dynamic()

    func final():
        if showGraph == 1:
            graph('Competition of two species; case 1.', m.N1, m.N2)



#N1 will always outgrow N2.
class Case2:
    data m: CompetitionModel
    data N1_init, N2_init: Real param #parameters for initial values
    data showGraph: Real param #Flag if graphs should be shown

    func init():
        #parameters
        m.r1 = 1; m.r2 = 1   #growth rates
        m.k1 = 10; m.k2 = 5  #carrying capacities
        m.b12 = 1; m.b21 = 1 #sensitivity against presence of the other species
        #initial values
        N1_init = 0.5
        N2_init = 0.5
        m.N1 = N1_init; m.N2 = N2_init

        #print which case it is
        m.printCase()

        #administrative parameters
        showGraph = 1; #yes, show the graph
        solutionParameters.simulationTime = 20;     #simulate for until this time is reached
        solutionParameters.reportingInterval = 0.1; #interval for returning values of the solution

    #this function is called repeatedly by the solver
    func dynamic():
        m.dynamic()

    func final():
        if showGraph == 1:
            graph('Competition of two species; case 2.', m.N1, m.N2)


#Which species will survive, depends on inital value and on growth speed.
#High values in growth speed or inital value are good for surival
#The steady state node in the midle of the diagram is a saddle.
class Case3:
    data m: CompetitionModel
    data N1_init, N2_init: Real param #parameters for initial values
    data showGraph: Real param #Flag if graphs should be shown

    func init():
        #parameters
        m.r1 = 1; m.r2 = 1   #growth rates
        m.k1 = 10; m.k2 = 10  #carrying capacities
        m.b12 = 2; m.b21 = 2 #sensitivity against presence of the other species
        #initial values
        N1_init = 0.51
        N2_init = 0.5
        m.N1 = N1_init; m.N2 = N2_init

        #print which case it is
        m.printCase()

        #administrative parameters
        showGraph = 1; #yes, show the graph
        solutionParameters.simulationTime = 20;     #simulate for until this time is reached
        solutionParameters.reportingInterval = 0.1; #interval for returning values of the solution
    end

    #this function is called repeatedly by the solver
    func dynamic():
        m.dynamic()
    end

    func final():
        if showGraph == 1:
            graph('Competition of two species; case 3.', m.N1, m.N2)



