#Competition of Two Species
#
# This is a simple model of competition of two species in a biologial system.
# The species compete for some common resource, which is not explicitly
# mentioned in the equations.
# The differential equations were propsed by Alfred J. Lotka and Vito Volterra.
#
#See:
#   http://en.wikipedia.org/wiki/Lotka-Volterra_inter-specific_competition_equations
#   Leah Edelstein-Keshet; Mathematical Models in Biology; 1988.
#       (republished by SIAM 2005) pp. 224.
#
# The whole argumentations and the variable names were taken from
# [Edelstein-Keshet].
#
#Differential Equations:
# Both species have logistic growth, with an additional term, that describes
# the (detrimental) effect that the species have on each other.
#
#   dN1/dt = r1*N1 * (k1-N1 - b12*N2)/k1
#   dN2/dt = r2*N2 * (k2-N2 - b21*N1)/k2
#
#Steady States:
#
# (x,y)_1 = (0, 0)
# (x,y)_2 = (c/d, a/b)
#
#
# b/d : growth of predator biomass per amount of eaten prey
# sqrt(c*a) : frequency of oscillation


#This is the usual predator prey model
class CompetitionModel(Model):
    data N1, N2: Real; #state variables
    data r1, r2, k1, k2, b12, b21: Real parameter;

    #The system's equations
    func dynamic():
        #   |logistic growth | effect of other species
        $N1 = r1*N1 * (k1-N1 - b12*N2)/k1;
        $N2 = r2*N2 * (k2-N2 - b21*N1)/k2;
    end

    #Abuse init function to detect the four different cases.
    #The simulation's final outcome is independent of the growth rate.
    func init():
        if k2/b21 > k1  and  k2 > k1/b12:
            print 'Case 1: N2 will outgrow N1.';
        end
        if k1 > k2/b12  and  k1/b12 > k2:
            print 'Case 2: N1 will outgrow N2.';
        end
        if k1 > k2/b21  and  k2 > k1/b12:
            print 'Case 3: species with highest inital value will survive.';
        end
        if k2/b12 > k1  and  k1/b12 > k2:
            print 'Case 4: Stable coexistence.';
        end
    end
end

class Case1(Process):
    data m: CompetitionModel;
    data showGraph: Real parameter; #Flag if graphs should be shown

    func init():
        #parameters
        m.r1 = 1; m.r2 = 1;   #growth rates
        m.k1 = 5; m.k2 = 10;  #carrying capacities
        m.b12 = 1; m.b21 = 1; #sensitivity against presence of the other species
        #initial values
        m.N1 = 0.5;
        m.N2 = 0.5;

        #print which case it is
        call m.init();

        #administrative parameters
        showGraph = 1; #yes, show the graph
        solutionParameters.simulationTime = 20;     #simulate for until this time is reached
        solutionParameters.reportingInterval = 0.1; #interval for returning values of the solution
    end

    #this function is called repeatedly by the solver
    func dynamic():
        call m.dynamic();
    end

    func final():
        if showGraph == 1:
            graph 'Competition of two species; case 1.', m.N1, m.N2;
        end
    end
end


class Case2(Process):
    data m: CompetitionModel;
    data showGraph: Real parameter; #Flag if graphs should be shown

    func init():
        #parameters
        m.r1 = 1; m.r2 = 1;   #growth rates
        m.k1 = 10; m.k2 = 5;  #carrying capacities
        m.b12 = 1; m.b21 = 1; #sensitivity against presence of the other species
        #initial values
        m.N1 = 0.5;
        m.N2 = 0.5;

        #print which case it is
        call m.init();

        #administrative parameters
        showGraph = 1; #yes, show the graph
        solutionParameters.simulationTime = 20;     #simulate for until this time is reached
        solutionParameters.reportingInterval = 0.1; #interval for returning values of the solution
    end

    #this function is called repeatedly by the solver
    func dynamic():
        call m.dynamic();
    end

    func final():
        if showGraph == 1:
            graph 'Competition of two species; case 2.', m.N1, m.N2;
        end
    end
end


class Case3(Process):
    data m: CompetitionModel;
    data showGraph: Real parameter; #Flag if graphs should be shown

    func init():
        #parameters
        m.r1 = 1; m.r2 = 1;   #growth rates
        m.k1 = 10; m.k2 = 10;  #carrying capacities
        m.b12 = 2; m.b21 = 2; #sensitivity against presence of the other species
        #initial values
        m.N1 = 0.51;
        m.N2 = 0.5;

        #print which case it is
        call m.init();

        #administrative parameters
        showGraph = 1; #yes, show the graph
        solutionParameters.simulationTime = 20;     #simulate for until this time is reached
        solutionParameters.reportingInterval = 0.1; #interval for returning values of the solution
    end

    #this function is called repeatedly by the solver
    func dynamic():
        call m.dynamic();
    end

    func final():
        if showGraph == 1:
            graph 'Competition of two species; case 3.', m.N1, m.N2;
        end
    end
end


class Case4(Process):
    data m: CompetitionModel;
    data showGraph: Real parameter; #Flag if graphs should be shown

    func init():
        #parameters
        m.r1 = 1; m.r2 = 1;   #growth rates
        m.k1 = 10; m.k2 = 10;  #carrying capacities
        m.b12 = 0.5; m.b21 = 0.5; #sensitivity against presence of the other species
        #initial values
        m.N1 = 2;
        m.N2 = 0.5;
        #m.N1 = 0.5;
        #m.N2 = 2;

        #print which case it is
        call m.init();

        #administrative parameters
        showGraph = 1; #yes, show the graph
        solutionParameters.simulationTime = 20;     #simulate for until this time is reached
        solutionParameters.reportingInterval = 0.1; #interval for returning values of the solution
    end

    #this function is called repeatedly by the solver
    func dynamic():
        call m.dynamic();
    end

    func final():
        if showGraph == 1:
            graph 'Competition of two species; case 4.', m.N1, m.N2;
        end
    end
end

