#############################################################################
#    Copyright (c) 2007 - 2010  Eike Welk                                          #
#    eike.welk@gmx.net                                                      #
#                                                                           #
#    License: Expat License (X11 License)                                   #
#                                                                           #
#    Permission is hereby granted, free of charge, to any person obtaining  #
#    a copy of this software and associated documentation files (the        #
#    "Software"), to deal in the Software without restriction, including    #
#    without limitation the rights to use, copy, modify, merge, publish,    #
#    distribute, sublicense, and/or sell copies of the Software, and to     #
#    permit persons to whom the Software is furnished to do so, subject to  #
#    the following conditions:                                              #
#                                                                           #
#    The above copyright notice and this permission notice shall be         #
#    included in all copies or substantial portions of the Software.        #
#                                                                           #
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        #
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     #
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. #
#    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   #
#    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   #
#    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      #
#    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 #
#############################################################################

#-----------------------------------------------------------------------------
#          Different Predator Prey Models
#-----------------------------------------------------------------------------



#Lotka-Volterra Predator Prey Model
#
# This is a simple model of predator prey relations in a biological system.
# The differential equations were proposed by Alfred J. Lotka and Vito Volterra
# independently in 1925 and 1926.
# Volterra used the model to explain unexpected results of marine biological
# research.
#
#see:
#  -http://en.wikipedia.org/wiki/Lotka-Volterra_equation
#  -Leah Edelstein-Keshet; Mathematical Models in Biology; 1988.
#       (republished by SIAM 2005) pp. 218.
#
# The whole argumentation and the variable names were taken from
# [Edelstein-Keshet].
#
#Differential Equations:
#
# Prey equation:
#   dx/dt = a*x - b*x*y
# Predator equation:
#   dy/dt = -c*y + d*x*y
#
#Steady States:
#
# (x,y)_1 = (0, 0)
# (x,y)_2 = (c/d, a/b)
#
#
# b/d : growth of predator biomass per amount of eaten prey
# sqrt(c*a) : frequency of oscillation
#
class ClassicModel:
    data x, y: Float #state variables
    data a, b, c, d: Float param

    func dynamic(this):
        #  | growth | predation
        $x = a*x    - b*x*y #prey
        #  | death  | food intake
        $y = -c*y   + d*x*y #predator


    func initialize(this):
        #parameters
        a = 1; b = 1; c = 1;
        d = b*0.2 #for each unit of prey eaten, the predators grow 0.2 units
        #initial values
        x = 2
        y = 2
        #administrative parameters
        solution_parameters(duration = 30, reporting_interval = 0.1)


    #To be called from python for creating phase plots.
    func init_phase_plot(this, start_x, start_y, duration):
        #parameters
        a = 1; b = 1; c = 1;
        d = b*0.2 #for each unit of prey eaten, the predators grow 0.2 units
        #initial values
        x = start_x
        y = start_y
        #administrative parameters
        solution_parameters(duration = duration, reporting_interval = 0.1)


    func final(this):
        graph(x, y, title='Classic Predator Prey Model')
        print('classic_final', x, y, time)



#Model where prey have logistic growth
# This model has stable solutions
#
# The model was also taken from:
# Leah Edelstein-Keshet; Mathematical Models in Biology; 1988.
#
class LogisticPrey:
    data x, y: Float #state variables
    data a, b, c, d, K: Float param

    func dynamic(this):
        #  | growth        | predation
        $x = a*x * (K-x)/K - b*x*y #prey
        #  | death         | food intake
        $y = -c*y          + d*x*y #predator


    func initialize(this):
        #parameters
        a = 1; b = 1; c = 1
        d = b*0.2 #for each unit of prey eaten, the predators grow 0.2 units
        K = 20
        #initial values
        x = 2
        y = 2
        #administrative parameters
        solution_parameters(duration = 30, reporting_interval = 0.1)


    #To be called from python for creating phase plots.
    func init_phase_plot(this, start_x, start_y, duration):
        #parameters
        a = 1; b = 1; c = 1
        d = b*0.2 #for each unit of prey eaten, the predators grow 0.2 units
        K = 20
        #initial values
        x = start_x
        y = start_y
        #administrative parameters
        solution_parameters(duration = duration, reporting_interval = 0.1)


    func final(this):
        graph(x, y, title='Predator Prey Model; Logistic Growth of Prey')
        print('logistic_final', x, y, time)



#Relatively complex predator-prey model.
#
# Features:
#   prey     : logistic growth
#   predators: growth with maximum food uptake capacity
#   Hunting  : predators and prey are killed by an additional super predator
#
# For the predators there are interesting consequences:
# - If they are bad hunters (Ky = 30) they survive in high numbers (y ~ 5),
#   together with high numbers of prey.
# - If they are good hunters (Ky = 3) there are strong fluctuations in both
#   populations. Long periods of famine alternate wit short periods of
#   very much food. But even their peak numbers (y ~ 3.6) are lower than the
#   numbers in the bad hunting scenario.
#
# Moderate hunting of any species by the super-predator stabilizes both
# populations as expected.
class EnhancedModel:
    data x, y: Float #x:prey, y:predators
    data muX, muY: Float #growth rates
    data hunting_yield: Float #Amount of animals killed by huntiong
    data muXMax, muYMax, Yxy, Dy, Kx, Ky, Hx, Hy: Float param

    func dynamic(this):
        muX = muXMax *(Kx-x)/Kx  #prey's growth rate (logistic growth)
        muY = muYMax *x/(x+Ky)  #predator's growth rate
        #  | growth | predation | hunting
        $x = muX*x - Yxy*y*muY- Hx*x #prey
        #  | growth | death     | hunting
        $y = muY*y - Dy*y     - Hy*y #predator
        hunting_yield = Hx*x + Hy*y


    func initialize(this):
        #parameters
        muXMax = 5 #prey's max growth rate
        Yxy = 10 #units prey necessary to produce one unit of predator
        Dy = 0.5 #predator's death rate
        muYMax = 2 #predator's max growth rate
        Kx = 20 #system's carrying capacity for prey
        Ky = 8  # 8   #Low prey concentration, hunting speed is 0.5 muYMax
        Hx = 0  # 2.  #Hunting rate on prey
        Hy = 0  # 0.5 #Hunting rate on predator
        #initial values
        x = 2
        y = 2
        #administrative parameters
        solution_parameters(duration = 30, reporting_interval = 0.1)


    #To be called from python for creating phase plots.
    func init_phase_plot(this, start_x, start_y, duration):
        #parameters
        muXMax = 5 #prey's max growth rate
        Yxy = 10 #units prey necessary to produce one unit of predator
        Dy = 0.5 #predator's death rate
        muYMax = 2 #predator's max growth rate
        Kx = 20 #system's carrying capacity for prey
        Ky = 8  # 8   #Low prey concentration, hunting speed is 0.5 muYMax
        Hx = 0  # 2.  #Hunting rate on prey
        Hy = 0  # 0.5 #Hunting rate on predator
        #initial values
        x = start_x
        y = start_y
        #administrative parameters
        solution_parameters(duration = duration, reporting_interval = 0.1)


    func final(this):
        graph(x, y, title='Strongly Modified Predator Prey Model')
        print('enhanced_final', x, y, time)



compile ClassicModel
compile LogisticPrey
compile EnhancedModel

