/***************************************************************************
 *   Copyright (C) 2005 by Eike Welk   *
 *   eike.welk@post.rwth-aachen.de   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/


#include "config.h"

#include "siml_pygenmain.h"
#include "siml_pyprocessgenerator.h"

#include <boost/format.hpp>
// #include <boost/tuple/tuple.hpp>


using std::cout;
using boost::format;


siml::PyGenMain::PyGenMain( std::ostream & inPyFile ):
        m_PyFile(inPyFile)
{
}


siml::PyGenMain::~PyGenMain()
{
}


/*!
 Create python objects for all processs in parse_result.
 */
void siml::PyGenMain::generateAll()
{
    cout << "Start generating Python code --------------------------\n";
    genFileStart();

    //loop over all processs and generate a python object for each.
    //genProcessObject(0); ///@TODO generate all processes
    cout << "Number of processes: " << repository()->process.size() << "\n";
    for( uint i=0; i< repository()->process.size(); ++i)
    {
        PyProcessGenerator genProc(m_PyFile);
        genProc.genProcessObject(i);
    }
}


/*!
Generate the first few lines of the python file

@todo find out how to insert time and date.
For time and date see:
http://www.boost.org/doc/html/date_time/examples/general_usage_examples.html
 */
void siml::PyGenMain::genFileStart()
{
    m_PyFile <<
            "#!/usr/bin/python\n"
            "\n"
            "#------------------------------------------------------------------------------#\n"
            "#                            Warning: Do not edit!                             #\n"
            "#                                                                              #\n"
            "# This file is generated, it will be overwritten every time the source file is #\n"
            "# changed.                                                                     #\n"
            "# Write a main routine in an other file. Use import or execfile to load        #\n"
            "# the objects defined in this file into the Python interpreter.                #\n"
            "#------------------------------------------------------------------------------#\n" <<
            format("# Generated by Siml Version %1% on ????.??.?? ??:??                      %|79t|#\n") % VERSION  <<
            "#------------------------------------------------------------------------------#\n"
            "\n"
            "\n"
            "from scipy import * # Also includes Numeric.\n"
            "import Gnuplot, Gnuplot.funcutils\n" ///@todo change from Gnuplot to a more standard plotting library
            "\n"
            "\n"
            ;
}


