#    Copyright (C) 2009 by Eike Welk
#    eike.welk@post.rwth-aachen.de



#Competition of Two Species
#
# This is a simple model of competition of two species in a biological system.
# The species compete for some common resource, which is not explicitly
# mentioned in the equations.
# The differential equations were proposed by Alfred J. Lotka and Vito Volterra.
#
#See:
#   http://en.wikipedia.org/wiki/Lotka-Volterra_inter-specific_competition_equations
#   Leah Edelstein-Keshet; Mathematical Models in Biology; 1988.
#       (republished by SIAM 2005) pp. 224.
#
# The whole argumentation and the variable names were taken from
# [Edelstein-Keshet].
#
#Differential Equations:
# Both species have logistic growth, with an additional term, that describes
# the (detrimental) effect that the species have on each other.
#
#   dN1/dt = r1*N1 * (k1-N1 - b12*N2)/k1
#   dN2/dt = r2*N2 * (k2-N2 - b21*N1)/k2
#
#Steady States:
#
# (x,y)_1 = (0, 0)
# (x,y)_2 = (c/d, a/b)
#
#
# b/d : growth of predator biomass per amount of eaten prey
# sqrt(c*a) : frequency of oscillation



#This is the usual predator prey model
class CompetitionModel:
    data N1, N2: Float #state variables
    data r1, r2, k1, k2, b12, b21: Float param
    #r1,  r2:  growth rates
    #k1,  k2:  carrying capacities of the system
    #b12, b21: sensitivity against presence of the other species

    #The system's equations
    func dynamic(this):
        #   |logistic growth | effect of other species
        $N1 = r1*N1 * (k1-N1 - b12*N2)/k1
        $N2 = r2*N2 * (k2-N2 - b21*N1)/k2

    #Function to detect the four different cases.
    #The simulation's final outcome is independent of the growth rate.
    #Thes cases are derived from mathematical analysis of the ODE and
    #taken from the Edelsein-Keshet book.
    func print_case(this):
        if k2/b21 > k1  and  k2 > k1/b12:
            print('Case 1: N2 will outgrow N1.')
        elif k1 > k2/b12  and  k1/b12 > k2:
            print('Case 2: N1 will outgrow N2.')
        elif k1 > k2/b21  and  k2 > k1/b12:
            print('Case 3: species with highest initial value will survive.')
        elif k2/b12 > k1  and  k1/b12 > k2:
            print('Case 4: Stable coexistence of both species.')
        else:
            print('Huh!')
        pass



#N2 will always outgrow N1.
class Case1:
    data m: CompetitionModel

    func initialize(this):
        #parameters
        m.r1 = 1; m.r2 = 1   #growth rates
        m.k1 = 5; m.k2 = 10  #carrying capacities
        m.b12 = 1; m.b21 = 1 #sensitivity against presence of the other species
        #initial values
        m.N1 = 0.5
        m.N2 = 0.5
        #Print which case it is.
        m.print_case()
        #administrative parameters
        solution_parameters(duration=20, reporting_interval=0.1)

    #Additional initialization function where some information can be supplied
    #by a Python script
    func init_states(this, N1, N2):
        #parameters
        m.r1 = 1; m.r2 = 1   #growth rates
        m.k1 = 5; m.k2 = 10  #carrying capacities
        m.b12 = 1; m.b21 = 1 #sensitivity against presence of the other species
        #initial values
        m.N1 = N1
        m.N2 = N2
        #administrative parameters
        solution_parameters(duration=20, reporting_interval=0.1)

    #this function is called repeatedly by the solver
    func dynamic(this):
        m.dynamic()

    func final(this):
        graph(m.N1, m.N2, title='Competition of two species; case 1.',)
        print("case1-final:", m.N1, m.N2)
        


#N1 will always outgrow N2.
class Case2:
    data m: CompetitionModel

    func initialize(this):
        #parameters
        m.r1 = 1; m.r2 = 1   #growth rates
        m.k1 = 10; m.k2 = 5  #carrying capacities
        m.b12 = 1; m.b21 = 1 #sensitivity against presence of the other species
        #initial values
        m.N1 = 0.5
        m.N2 = 0.5
        #Print which case it is.
        m.print_case()
        #administrative parameters
        solution_parameters(duration=20, reporting_interval=0.1)

    #Additional initialization function where some information can be supplied
    #by a Python script
    func init_states(this, N1, N2):
        #parameters
        m.r1 = 1; m.r2 = 1   #growth rates
        m.k1 = 10; m.k2 = 5  #carrying capacities
        m.b12 = 1; m.b21 = 1 #sensitivity against presence of the other species
        #initial values
        m.N1 = N1
        m.N2 = N2
        #administrative parameters
        solution_parameters(duration=20, reporting_interval=0.1)

    #this function is called repeatedly by the solver
    func dynamic(this):
        m.dynamic()

    func final(this):
        graph(m.N1, m.N2, title='Competition of two species; case 2.')
        print("case2-final:", m.N1, m.N2)
        


#Which species will survive, depends on initial value and on growth speed.
#High values in growth speed or initial value are good for survival
#The steady state node in the middle of the diagram is a saddle.
class Case3:
    data m: CompetitionModel
    data showGraph: Float param #Flag if graphs should be shown

    func initialize(this):
        #parameters
        m.r1 = 1; m.r2 = 1   #growth rates
        m.k1 = 10; m.k2 = 10 #carrying capacities
        m.b12 = 2; m.b21 = 2 #sensitivity against presence of the other species
        #initial values
        m.N1 = 0.51
        m.N2 = 0.5
        #Print which case it is.
        m.print_case()
        #administrative parameters
        solution_parameters(duration=20, reporting_interval=0.1)

    #Additional initialization function where some information can be supplied
    #by a Python script
    func init_r1(this, in_r1):
        #parameters
        m.r1 = in_r1; m.r2 = 1 #growth rates
        m.k1 = 10; m.k2 = 10   #carrying capacities
        m.b12 = 2; m.b21 = 2   #sensitivity against presence of the other species
        #initial values
        m.N1 = 0.51
        m.N2 = 0.5
        #Print which case it is.
        m.print_case()
        #administrative parameters
        solution_parameters(duration=20, reporting_interval=0.1)

    #this function is called repeatedly by the solver
    func dynamic(this):
        m.dynamic()

    func final(this):
        graph(m.N1, m.N2, title='Competition of two species; case 3.')
        print("case3-final:", m.N1, m.N2)



#Stable coexistence of both species.
class Case4:
    data m: CompetitionModel

    func initialize(this):
        #parameters
        m.r1 = 1; m.r2 = 1       #growth rates
        m.k1 = 10; m.k2 = 10     #carrying capacities
        m.b12 = 0.5; m.b21 = 0.5 #sensitivity against presence of the other species
        #initial values
        m.N1 = 2
        m.N2 = 0.5
        #Print which case it is.
        m.print_case()
        #administrative parameters
        solution_parameters(duration=20, reporting_interval=0.1)

    #Additional initialization function where some information can be supplied
    #by a Python script
    func init_r1(this, in_r1):
        #parameters
        m.r1 = in_r1; m.r2 = 1   #growth rates
        m.k1 = 10; m.k2 = 10     #carrying capacities
        m.b12 = 0.5; m.b21 = 0.5 #sensitivity against presence of the other species
        #initial values
        m.N1 = 2
        m.N2 = 0.5
        #administrative parameters
        solution_parameters(duration=20, reporting_interval=0.1)

    #this function is called repeatedly by the solver
    func dynamic(this):
        m.dynamic()

    func final(this):
            graph(m.N1, m.N2, title='Competition of two species; case 4.')
            print("case4-final:", m.N1, m.N2)



compile Case1
compile Case2
compile Case3
compile Case4