#############################################################################
#    Copyright (c) 2007 - 2010  Eike Welk                                          #
#    eike.welk@gmx.net                                                      #
#                                                                           #
#    License: Expat License (X11 License)                                   #
#                                                                           #
#    Permission is hereby granted, free of charge, to any person obtaining  #
#    a copy of this software and associated documentation files (the        #
#    "Software"), to deal in the Software without restriction, including    #
#    without limitation the rights to use, copy, modify, merge, publish,    #
#    distribute, sublicense, and/or sell copies of the Software, and to     #
#    permit persons to whom the Software is furnished to do so, subject to  #
#    the following conditions:                                              #
#                                                                           #
#    The above copyright notice and this permission notice shall be         #
#    included in all copies or substantial portions of the Software.        #
#                                                                           #
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        #
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     #
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. #
#    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   #
#    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   #
#    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      #
#    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 #
#############################################################################

#Model of a biological reactor
#
# Time is in hours
# Concentrations are in g/l
# Constants are roughly correct for C.glutamicum



#Define system behaviour
class BioReactor:
    #Define  values that stay constant during the simulation.
    data mu_max, Ks, Yxs, Sf, ms: Float param
    #Define values that change during the simulation.
    data mu, X, S, S_pos, STY, D: Float

    #Specify the differential equations
    func dynamic(this):
        #compute growth speed (of biomass) - only sensibly defined for for S > 0
        #to see why type the following in a shell window:
        # ipython -pylab
        # mu_max = 0.3; Ks = 0.01
        # S = linspace(-0.2, 0.2, 501)
        # plot(S, mu_max * S/(S+Ks))
        S_pos = max(S, 0)
        mu = mu_max * S_pos/(S_pos+Ks)

        $X = mu*X - D*X                      #change of biomass concentration
        $S = -1/Yxs*mu*X + D*Sf - D*S - ms*X #change of sugar concentration (with maintainance rate)
#        $S = -1/Yxs*mu*X + D*Sf - D*S        #change of sugar concentration (without maintenance rate)
        STY = X*D                            #yield per time and space



#Biological reactor with no inflow or outflow.
#This kind of reactor is called a 'batch' reactor.
#
# Note the negative sugar concentration towards the end of the simulation!
# In reality some bacteria would die, and become food. More importantly, the
# model becomes invalid. The formulas only apply when the bacteria
# grow fairly fast on sugar.
class Batch: #Define a concrete simulation experiment
    #Define parameters.
    data D: Float param
    #Say which model will be used.
    data r: BioReactor

    func initialize(this):
        #Specify options for the simulation algorithm.
        solution_parameters(duration=30, reporting_interval=0.1)

        #Set values to the parameters.
        r.mu_max = 0.32 #max growth speed
        r.Ks     = 0.01 #at this sugar concentration growth speed is 0.5 * mu_max
        r.Yxs    = 0.5  #one g sugar gives this much biomass
        r.Sf     = 20   #sugar concentration in feed liquid (inflow)
        D        = 0    #dilution rate (inflow speed)
        r.ms     = 0.02 #sugar consumption when bacteria are not growing

        #Set initial values to the state variables.
        r.X = 0.1 #initial biomass concentration
        r.S = 20  #initial sugar concentration
        print('initial-values-batch:', r.X, r.S)


    func dynamic(this):
        r.D = D     #dilution rate is a variable of the reactor
        r.dynamic() #call the BioReactor's dynamic function


    #Show results
    func final(this):
        graph(r.mu, r.X, r.S, title='Batch')
        #save('batch.simres')
        print('final-values-batch:', r.X, r.S)



#Biological reactor with constant inflow and outflow.
#
#From the beginning of the experiment the feed pump pumps sugary water into
#the reactor, and also removes biomass. It takes fairly long for the bacteria
#to reach their final concentration. compared to the batch experiment above.
#
#The flowrate is relatively low: half of the bacteria's maximum growth speed.
#With higher flow rates it takes even longer for the bacteria to reach their
#final concentration.
class Conti: #Define a concrete simulation experiment
    #Define parameters.
    data D: Float param
    #Say which model will be used.
    data r: BioReactor

    func initialize(this):
        #Specify options for the simulation algorithm.
        #Total simulation time: 30 h; time between data points: 0.1 h
        solution_parameters(duration=30, reporting_interval=0.1)
        #solution_parameters(duration=300, reporting_interval=0.01)

        #Set values to the parameters.
        r.mu_max = 0.32 #[1/h] max growth speed
        r.Ks     = 0.01 #at this sugar concentration growth speed is 0.5 * mu_max
        r.Yxs    = 0.5  #one g sugar gives this much biomass
        r.Sf     = 20   #sugar concentration in feed liquid (inflow)
        D        = 0.3  #[1/h] dilution rate (inflow speed)
        r.ms     = 0.02 #sugar consumption when bacteria are not growing

        #Set initial values to the state variables.
        r.X = 0.1 #initial biomass concentration
        r.S = 20  #initial sugar concentration
        print('initial-values-conti:', r.X, r.S)


    func dynamic(this):
        r.D = D     #dilution rate is a variable of the reactor
        r.dynamic() #call the BioReactor's dynamic function


    #Show results
    func final(this):
        graph(r.mu, r.X, r.S, title='Conti')
        graph(r.D, r.mu, title='Conti')
        print('final-values-conti:', r.X, r.S)
       


#Biological reactor with constant inflow and outflow
#
# Here we make the start more smart:
# 1. start with height sugar concentration and no inflow (like a batch reactor)
# 2. when biomass concentration is above a certain level, switch inflow pump on
# Therefore the bacteria reach high concentrations fast.
#
#The production flowrate is close to the maximum growth speed (0.3 1/h).
class ContiSmartStart: #Define a concrete simulation experiment
    #Define parameters.
    data D_prod: Float param
    #Say which model will be used.
    data r: BioReactor

    func initialize(this):
        #Specify options for the simulation algorithm.
        #Total simulation time: 30 h; time between data points: 0.01 h
        solution_parameters(duration=30, reporting_interval=0.01)

        #Set values to the parameters.
        r.mu_max = 0.32 #[1/h] max growth speed
        r.Ks     = 0.01 #at this sugar concentration growth speed is 0.5 * mu_max
        r.Yxs    = 0.5  #one g sugar gives this much biomass
        r.Sf     = 20   #sugar concentration in feed liquid (inflow)
        D_prod   = 0.3  #[1/h] dilution rate (inflow speed) for production
        r.ms     = 0.02 #sugar consumption when bacteria are not growing

        #Set initial values to the state variables.
        #Note: the full path has to be specified for variables.
        r.X = 0.1 #initial biomass concentration
        r.S = 20  #initial sugar concentration
        print('initial-values-smart:', r.X, r.S)


    func dynamic(this):
        #switch dilution rate depending on the biomass concentration
        if r.X < r.Sf * r.Yxs * 0.90:
            r.D = 0 #low biomass concentration: pump off
        else:
            r.D = D_prod # high biomass concentration: pump on

        #compute the reactor's dynamic equations
        r.dynamic()


    #Show results
    func final(this):
        graph(r.mu, r.X, r.S, title='ContiSmartStart - mu, X, S')
        graph(r.D, r.mu, title='ContiSmartStart - mu, D')
        #save('ContiSmartStart-results.csv')
        print('final-values-smart:', r.X, r.S)



#create the python objects
compile Batch
compile Conti
compile ContiSmartStart