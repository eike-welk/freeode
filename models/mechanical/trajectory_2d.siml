#############################################################################
#    Copyright (c) 2009 - 2009 Eike Welk                                          #
#    eike.welk@gmx.net                                                      #
#                                                                           #
#    License: Expat License (X11 License)                                   #
#                                                                           #
#    Permission is hereby granted, free of charge, to any person obtaining  #
#    a copy of this software and associated documentation files (the        #
#    "Software"), to deal in the Software without restriction, including    #
#    without limitation the rights to use, copy, modify, merge, publish,    #
#    distribute, sublicense, and/or sell copies of the Software, and to     #
#    permit persons to whom the Software is furnished to do so, subject to  #
#    the following conditions:                                              #
#                                                                           #
#    The above copyright notice and this permission notice shall be         #
#    included in all copies or substantial portions of the Software.        #
#                                                                           #
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        #
#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     #
#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. #
#    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   #
#    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   #
#    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      #
#    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 #
#############################################################################



# TODO: ---------------- Model is currently DEFUNCT! -------------------
#       The language does not support derivatives of user defined types.
#
#-----------------------------------------------------------------------------
#          Trajectory of Slanted Throw
#-----------------------------------------------------------------------------



class Vec2:
    data x: Float role_unknown
    data y: Float role_unknown


    func len(this):
        return sqrt(this*this)


    func __add__(this, other):
        #vector addition or elementwise addition
        data res: Vec2
        if isinstance(other, Vec2):
            res.x = x + other.x
            res.y = y + other.y
        elif isinstance(other, Float):
            res.x = x + other
            res.y = y + other
        else:
            ##TODO: raise NotImplemented('Arguments for "+" operator must be Vec2 or Float.')
            return None
        return res


    func __sub__(this, other):
        #vector subtraction or elementwise subtraction
        data res: Vec2
        if isinstance(other, Vec2):
            res.x = x - other.x
            res.y = y - other.y
        elif isinstance(other, Float):
            res.x = x - other
            res.y = y - other
        else:
            ##TODO: raise NotImplemented('Arguments for "+" operator must be Vec2 or Float.')
            return None
        return res


    func __mul__(this, other):
        #dot product for two vectors; scalar product if other is a scalar
        if isinstance(other, Vec2):
            data res: Float
            res = x * other.x + y * other.y
        elif isinstance(other, Float):
            data res: Vec2
            res.x = x * other
            res.y = y * other
        else:
            ##TODO: raise NotImplemented('Arguments for "+" operator must be Vec2 or Float.')
            return None
        return res


    func __div__(this, other: Float):
        #scalar division
        data res: Vec2
        res.x = x / other
        res.y = y / other
        return res


    func __assign__(this, other):
        #x = other.x
        #y = other.y
        if isinstance(other, Vec2):
            x = other.x
            y = other.y
        elif isinstance(other, Float):
            x = other
            y = other
        else:
            ##TODO: raise NotImplemented('Arguments for "+" operator must be Vec2 or Float.')
            return 666


    func __diff__(this):
        data res: Vec2
        replace_attr(res.x, $x)
        replace_attr(res.y, $y)
        return res

#length of the vector
func len(v:Vec2):
    return v.len()

#Dot product of two vectors
func dot(v1:Vec2, v2:Vec2):
    return v1 * v2

#cross product of two vectors
#As 2D vectors have only components in the X-Y plane,
#this product is just a scalar number. It can be thought
#to be the length of the result vector in Z-direction.
func cross(a:Vec2, b:Vec2):
    return a.x*b.y - a.y*b.x

#TODO: angle between two vectors


data g, pi:Float
g = 9.81
pi = 3.1415
data vg: Vec2
vg.x = 0
vg.y = -g

class Throw:
    data angle0, v0: Float param
    #data vg: Vec2 param
    #p0: Vec2 param

    data p, v: Vec2
    data dummy: Vec2
    data fdummy: Float

    func initialize(this):
        angle0 = pi/180 * 45
        v0 = 30
        #vg.x = 0
        #vg.y = -g

        #p.x = 0
        #p.y = 0
        p = 0
        v.x = cos(angle0) * v0
        v.y = sin(angle0) * v0
        solution_parameters(duration = 4, reporting_interval = 0.1)


    func dynamic(this):
        #$v = vg
        $v.x = 0
        $v.y = -g
        $p = v
        dummy = p - v * 2
        fdummy = len(v)


    func final(this):
        graph(p.x, p.y)
        graph(fdummy)
        #graph(dummy.x, dummy.y)

compile Throw