<?xml version="1.0" encoding="UTF-8"?>
<!--
====================================================================
SIML syntax highlighting file for the KDE editors Kate and Kwrite
====================================================================
Copyright: 2007, Eike Welk
License: GPL

Derived from the MATLAB syntax highlighting.
Original author: Stefan Stoll, Swiss Federal Institute of Technology, Zurich
====================================================================

Usage:
Copy this file into the following folder:
~/.kde/share/apps/katepart/syntax

The katepart will then highlight files with the extensions 'siml' or 'SIML'
with this file. This means Kate, Kwrite and Kdevelop will do syntax
highligting for SIML files.

================= old MATLAB hl documentation (part) ===============

This file works only for syntactically correct MATLAB code. For incorrect
code, the behaviour is undefined. One exception is made: Incomplete strings
with missing closing delimiter are highlighted separately, just as in the
native editor of MATLAB does.

Highlighting errors never propagate across line breaks.

Most of this XML file is straight and simple. Only the character ' (&apos;)
needs nontrivial treatment, since it is both a postfix operator indicating
complex conjugate transpose (adjoint) and a string delimiter. It is an
adjoint operator in the following positions:
1) immediately after an identifier (variable, function, but not keyword)
2) immediately after a number literal
3) immediately after the closing parenthesis ), ] and }
4) immediately after a simple transpose operator .'
5) immediately after another adjoint operator '
In all other cases it is a string delimiter.

This is implemented using look-ahead regexps. If one of the entities in the
above cases 1-4 (identifier, number literal, ...) matches and look-ahead
shows that it is followed by a ', the entity is highlighted and control is
passed to the special context _adjoint, whose sole purpose is to correctly
highlight a series of ' (thus covering case 5 as well). _adjoint immediately
returns to the default context _normal.

MATLAB number literals are different from those in C and similar languages:
a) All numbers literals are doubles. There is no distinction between float and int.
b) There is no notation of hex or oct base integers.
c) The symbols i or j may be attached to a number to indicate a multiplication
    with the imaginary unit.

MATLAB identifiers have to start with a letter followed by any number of letters,
digits and underscores.

There is a small number of reserved keywords, which cannot be the target of an
assignment. All other identifiers (including all of the many 100s of MATLAB commands)
can be redefined. Consequently, only the reserved keywords are highlighted.

-->

<!DOCTYPE language SYSTEM "language.dtd">

<language name="Siml" version="0.3" kateversion="2.2" section="Scientific"
        extensions="*.siml;*.SIML" mimetype="text/simlfile"
        casesensitive="1">
<highlighting>
    <!-- Reserved keywords in SIML -->
    <list name="KeywordsList">
    <!--keywords-->
    <item> class </item>
    <item> func </item>
    <item> data </item>
    <item> if </item>
    <item> else </item>
    <item> end </item>
    <item> parameter </item>
    </list>

    <!--Special names, predefined objects-->
    <list name="SpecialNamesList">
        <!--special objects-->
        <item> Model </item>
        <item> Process </item>
        <item> Real </item>
        <!--special member functions-->
        <item> dynamic </item>
        <item> init </item>
        <item> final </item>
        <!--predefined variable-->
        <item> time </item>
        <!--predefined parameters-->
        <item> pi </item>
    </list>

    <contexts>
        <context name="_normal" attribute="Normal Text" lineEndContext="#pop">
            <!--code folding-->
<!--             <RegExpr context="#stay" attribute="Keyword" String="\b(class)\b" beginRegion="class" /> -->
<!--             <RegExpr context="#stay" attribute="Keyword" String="\b(end)\b" endRegion="class" /> -->
<!--             <RegExpr context="#stay" attribute="Keyword" String="\b(func)\b" beginRegion="func" /> -->
<!--             <RegExpr context="#stay" attribute="Keyword" String="\b(end)\b" endRegion="func" /> -->
<!--             <RegExpr context="#stay" attribute="Keyword" String="\b(if)\b" beginRegion="if" /> -->
<!--             <RegExpr context="#stay" attribute="Keyword" String="\b(end)\b" endRegion="if" /> -->

            <!-- If ' is not the adjoint operator, it starts a string or an unterminated string -->
            <RegExpr context="#stay" attribute="String" String="'[^']*(''[^']*)*'(?=[^']|$)" />
            <RegExpr context="#stay" attribute="Incomplete String" String="'[^']*(''[^']*)*" />

            <!-- Handling of keywords, comments, system commands, identifiers, numbers and braces -->
            <keyword context="#stay" attribute="Keyword" String="KeywordsList" />
            <RegExpr context="#stay" attribute="Comment" String="#.*$" />
    <!--         <RegExpr context="#stay" attribute="System" String="!.*$" /> -->
            <RegExpr context="#stay" attribute="Variable" String="[a-zA-Z]\w*" />
            <RegExpr context="#stay" attribute="Number" String="(\d+(\.\d+)?|\.\d+)([eE][+-]?\d+)?[ij]?" />
            <AnyChar context="#stay" attribute="Delimiter" String="()[]{}"/>
            <keyword context="#stay" attribute="SpecialName" String="SpecialNamesList" />

            <!-- Three and two-character operators -->
    <!--         <StringDetect context="#stay" attribute="Operator" String=":="/> -->
    <!--         <StringDetect context="#stay" attribute="Operator" String="..."/> -->
            <StringDetect context="#stay" attribute="Operator" String="=="/>
            <StringDetect context="#stay" attribute="Operator" String="!="/>
    <!--         <StringDetect context="#stay" attribute="Operator" String="~="/> -->
            <StringDetect context="#stay" attribute="Operator" String="&lt;="/>
            <StringDetect context="#stay" attribute="Operator" String="&gt;="/>
    <!--         <StringDetect context="#stay" attribute="Operator" String="&amp;&amp;"/> -->
    <!--         <StringDetect context="#stay" attribute="Operator" String="||"/> -->
    <!--         <StringDetect context="#stay" attribute="Operator" String=".*"/> -->
    <!--         <StringDetect context="#stay" attribute="Operator" String=".^"/> -->
    <!--         <StringDetect context="#stay" attribute="Operator" String="./"/> -->
    <!--         <StringDetect context="#stay" attribute="Operator" String=".'"/> -->

            <!-- Single-character operators -->
    <!--         <AnyChar context="#stay" attribute="Operator" String="*+-/\&amp;|&lt;&gt;~^=,;:@"/> -->
            <AnyChar context="#stay" attribute="Operator" String="*+-/^$&lt;&gt;:="/>
        </context>

    <!-- Context entered after encountering an ' adjoint operator -->
<!--      <context name="_adjoint" attribute="Operator" lineEndContext="#pop">
        <RegExpr context="#pop" attribute="Operator" String="'+" />
    </context>-->
    </contexts>

    <itemDatas>
        <itemData name="Normal Text" defStyleNum="dsNormal" />
        <itemData name="Variable" defStyleNum="dsNormal" />
        <itemData name="Operator" defStyleNum="dsNormal" color="#FF00FF"/>
        <itemData name="Number" defStyleNum="dsFloat"  color="#0000ff"/>
        <itemData name="Delimiter" defStyleNum="dsNormal"  color="#FF00FF"/>
        <itemData name="String" defStyleNum="dsString" color="#b20000"/>
    <!--       <itemData name="System" defStyleNum="dsBaseN" color="#b28c00"/> -->
        <itemData name="Incomplete String" defStyleNum="dsChar" color="#a020f0"/>
        <itemData name="Keyword" defStyleNum="dsNormal" color="#0000ff"/>
        <itemData name="SpecialName" defStyleNum="dsNormal" color="#00ff00"/>
        <itemData name="Comment" defStyleNum="dsComment" />
    </itemDatas>
    <!-- MATLAB 6.5 default color scheme
        keywords             #0000ff
        comments             #228b22
        strings              #b20000
        unterminated strings #a020f0
        system commands      #b28c00
        errors               #ff0000
        all others           #000000
    -->

</highlighting>

<general>
    <comments>
        <comment name="singleLine" start="# " />
        <comment name="singleLine" start="//" />
    </comments>
    <keywords casesensitive="1" weakDeliminator=""/>
</general>

</language>
<!--
    Insert test code
-->
