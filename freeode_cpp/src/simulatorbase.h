//This file was generated by the script "py2c_string".

"\n"
"\n"
"from scipy import * # Also includes Numeric.\n"
"import Gnuplot, Gnuplot.funcutils # @todo switch to a more well known graphics library\n"
"\n"
"\n"
"class SimulatorBase:\n"
"    \"\"\" Base class for the generated simulator classes \"\"\"\n"
"\n"
"    def get(self, varName):\n"
"        \"\"\"\n"
"        Get a variable by name.\n"
"\n"
"        @todo add returning multiple variables at once\n"
"\n"
"        There are special variable names:\n"
"           'time': vector of times\n"
"           'all': array of all variables\n"
"        \"\"\"\n"
"        if varName == 'time':\n"
"            return self.time\n"
"        elif varName == 'all':\n"
"            return self.resultArray\n"
"        index = self.resultArrayMap[varName]\n"
"        return self.resultArray[:,index]\n"
"\n"
"    def graph(self, varNames):\n"
"        \"\"\"\n"
"        Show one or several variables in a graph.\n"
"\n"
"        Parameters:\n"
"           varNames: String with a list of variables to be plotted. (Space or comma seperated.)\n"
"                     e.g.: 'X mu'\n"
"        \"\"\"\n"
"\n"
"        diagram=Gnuplot.Gnuplot(debug=0, persist=1)\n"
"        diagram('set data style lines')\n"
"        diagram.title(varNames)\n"
"        diagram.xlabel('Time')\n"
"\n"
"        varList = varNames.replace(',', ' ').split(' ')\n"
"        for varName1 in varList:\n"
"            if not (varName1 in self.resultArrayMap): continue\n"
"            curve=Gnuplot.Data(self.get('time'), self.get(varName1))\n"
"            diagram.replot(curve)\n"
"\n"
"    def simulate(self):\n"
"        \"\"\"\n"
"        This function performs the simulation.\n"
"        \"\"\"\n"
"\n"
"        self.time = linspace(0.0, self.simulationTime, self.simulationTime/self.reportingInterval + 1) #note: no rounding is better, linspace is quite smart.\n"
"        y = integrate.odeint(self._diffStateT, self.initialValues, self.time)\n"
"        self._outputEquations(y)\n"
"\n"
"\n"
